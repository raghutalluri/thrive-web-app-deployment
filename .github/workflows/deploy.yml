name: Main CI/CD Pipeline

# This workflow runs on any push to the 'main' branch
on:
  push:
    branches: [ "main" ]

jobs:
  # JOB 1: Build the Docker image and push it to ECR
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: thrive-web-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # JOB 2: Deploy the new image to the EC2 instances
  deploy-to-ec2:
    name: Deploy to EC2 Instances
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Step 2: Get the IDs of the running instances from the Auto Scaling Group.
      # This is the most reliable way to target them.
      - name: Get Instance IDs
        id: get_instance_ids
        run: |
          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names thrive-app-asg \
            --query "AutoScalingGroups[0].Instances[?HealthStatus=='Healthy'].InstanceId" \
            --output text)
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV

      # Step 3: Use the AWS CLI to send the deployment command to the specific instance IDs.
      - name: Execute deployment script on EC2 instances via AWS CLI
        if: env.INSTANCE_IDS != '' 
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids ${{ env.INSTANCE_IDS }} \
            --parameters '{
              "commands":[
                "cd /home/ec2-user/app",
                "aws ecr get-login-password --region us-east-2 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPO_URL }}",
                "echo \"version: ''3.7''\\nservices:\\n  web:\\n    image: ${{ secrets.AWS_ECR_REPO_URL }}:latest\\n    ports:\\n      - ''3000:3000''\\n    healthcheck:\\n      test: [\\\"CMD\\\", \\\"curl\\\", \\\"-f\\\", \\\"http://localhost:3000/health\\\"]\\n      interval: 30s\\n      timeout: 10s\\n      retries: 3\" > docker-compose.yml",
                "sudo /usr/local/bin/docker-compose pull",
                "sudo /usr/local/bin/docker-compose up -d --force-recreate"
              ]
            }'
