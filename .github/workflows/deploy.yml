name: Reusable - Deploy to EC2

# This workflow is triggered when called by another workflow
on:
  workflow_call:

jobs:
  deploy-to-ec2:
    name: Deploy to EC2 Instances
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Get Instance IDs
        id: get_instance_ids
        run: |
          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names thrive-app-asg \
            --query "AutoScalingGroups[0].Instances[?HealthStatus=='Healthy'].InstanceId" \
            --output text | tr '\t' ' ')
          echo "INSTANCE_IDS=$INSTANCE_IDS" >> $GITHUB_ENV

      - name: Wait for SSM agent.
        if: env.INSTANCE_IDS != '' # Only run if we found healthy instances
        run: |
          echo "Waiting for SSM agents on instances: ${{ env.INSTANCE_IDS }}"
          for instance_id in ${{ env.INSTANCE_IDS }}; do
            echo "Checking status for $instance_id..."
            for i in {1..60}; do
              STATUS=$(aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$instance_id" --query "InstanceInformationList[0].PingStatus" --output text || echo "Error")
              if [ "$STATUS" == "Online" ]; then
                echo "$instance_id is online."
                break
              else
                echo "$instance_id is not online yet (Status: $STATUS). Waiting... ($i/60)"
                sleep 10
              fi
            done
            # Final check after the loop for each instance
            STATUS=$(aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$instance_id" --query "InstanceInformationList[0].PingStatus" --output text || echo "Error")
            if [ "$STATUS" != "Online" ]; then
              echo "::error::Instance $instance_id did not come online after 5 minutes."
              exit 1
            fi
          done
          echo "All instances are online."

      # Step 2: Use the AWS CLI directly to send the deployment command.
      - name: Execute deployment script on EC2 instances via AWS CLI
        if: env.INSTANCE_IDS != '' # Only run if we found healthy instances
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids ${{ env.INSTANCE_IDS }} \
            --parameters '{
              "commands":[
                "cd /home/ec2-user/app",
                "aws ecr get-login-password --region us-east-2 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPO_URL }}",
                "echo \"version: ''3.7''\\nservices:\\n  web:\\n    image: ${{ secrets.AWS_ECR_REPO_URL }}:latest\\n    ports:\\n      - ''3000:3000''\\n    healthcheck:\\n      test: [\\\"CMD\\\", \\\"curl\\\", \\\"-f\\\", \\\"http://localhost:3000/health\\\"]\\n      interval: 30s\\n      timeout: 10s\\n      retries: 3\" > docker-compose.yml",
                "sudo /usr/local/bin/docker-compose pull",
                "sudo /usr/local/bin/docker-compose up -d --force-recreate"
              ]
            }'